[gd_scene load_steps=5 format=2]

[ext_resource path="res://assets/graphics/ships/rot/agile.png" type="Texture" id=1]
[ext_resource path="res://src/game/ExplosionEmitter.tscn" type="PackedScene" id=3]

[sub_resource type="GDScript" id=1]
script/source = "extends Ship
class_name Rocket

var target = null
var target_position = null

var lifetime = 0.0


func _ready():
	connect(\"body_entered\", self, \"_on_body_entered\")
	$DetectionArea.connect(\"body_entered\", self, \"_on_target_entered\")


var exploded = false


func _on_target_entered(body):
	if target != null:
		return

	if GameFlow.is_ship(body):
		if body.faction != faction:
			target = body


func get_shot(direction: Vector2):
	velocity = max_speed * direction

func load_stats(rocket_stats: Dictionary):
	acceleration = rocket_stats.acceleration
	brake_speed = rocket_stats.get(\"brake_speed\", 2.0)
	turn_speed = rocket_stats.turn_speed
	max_speed = rocket_stats.speed
	stats.health = rocket_stats.health
	stats.max_health = rocket_stats.max_health
	stats.shields = 0
	stats.max_shields = 0


func turn_towards_target(delta):
	var angle_to_target = get_angle_to_target()
	if angle_to_target > 0 and angle_to_target < PI:
		turn_left(delta)
		$TurnLeftEmission.emitting = true
		$TurnRightEmission.emitting = false
	elif angle_to_target < 0 and angle_to_target > -PI:
		turn_right(delta)
		$TurnLeftEmission.emitting = false
		$TurnRightEmission.emitting = true

func get_angle_to_target():
	var orientation = get_orientation()
	var target_orientation: Vector2 = target_position - position
	var angle = target_orientation.angle_to(orientation)
	return angle


func move_towards_target(delta):
	var angle_to_target = get_angle_to_target()

	if abs(angle_to_target) < PI / 3:
		accelerate(delta)
		$NormalEmission.emitting = true
	else:
		brake(delta)
		$NormalEmission.emitting = false

func _on_body_entered(body):
	if GameFlow.is_ship(body) or GameFlow.is_asteroid(body) or GameFlow.is_container(body):
		explode()

func explode():
	play_explosion()
	impact_explosion()
	set_physics_process(false)
	yield(get_tree().create_timer(2.0), \"timeout\")
	queue_free()

func _physics_process(delta):
	lifetime -= delta

	if lifetime < 0:
		explode()

	if lifetime < 1.0:
		$NormalEmission.emitting = false
		velocity = min(velocity.length(), max_speed * lifetime / 1.0) * velocity.normalized()
	else:
		if target:
			target_position = target.position
			turn_towards_target(delta)
			move_towards_target(delta)

	var collision: KinematicCollision2D = move_and_collide(velocity * delta, true)
	if collision:
		explode()

"

[sub_resource type="CircleShape2D" id=2]
radius = 200.0

[node name="Rocket" type="Area2D"]
script = SubResource( 1 )

[node name="Sprite" type="Sprite" parent="."]
texture = ExtResource( 1 )

[node name="ExplosionEmitter" parent="." instance=ExtResource( 3 )]

[node name="ExplosionArea" type="Area2D" parent="."]

[node name="CollisionShape2D" type="CollisionShape2D" parent="ExplosionArea"]
shape = SubResource( 2 )
